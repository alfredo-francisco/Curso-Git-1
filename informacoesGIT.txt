testando os comandos de iniciazação de um repositorio no github 

git status: permite saber oque foi alterado ou adicionado nos arquivos

Arquivos em amarelo com o simbolo M significam Modificaded, arquivo modificado

Arquivos em verde com o simbolo U significa Untracked(não monitorado), ou seja arquivos novos que não estão sendo monitorados pelo github

Para adicionar os arquivos no repositorio utilizamos o comando git add <name file>, caso 
tenha varios arquivos a serem enviados utilizamos o comando git add . (ponto) para adicionar tudo de uma vez só

Para salvar os arquivos modificados ou criados utilizamos o comando git commit <nome do arquivo>, ou para
comitar varios arquivos de uma vez utilizamos o comando git commit -a 
O ideal para cada commit é enviar junto uma mensagem explicando oque esta sendo comitado e isso é feito pela flag -m
ao final o comando fica: git commit <namefile> -m"Enviado o arquivo com a seguinte funcionalidade adicionada..."

Para atualizar o repo, enviar tudo ao github, utilizamos o comando git push.

Para atualizar o arquivo local com o arquivo principal do gitHub utilizamos o comando git pull

Para clonar algum repo utilizamos o comando git clone <endereço url do repo a ser clonado>. (ponto ao final) o ponto indica 
que o clone deve ser feito no local indicado pelo terminal
Ocorre quando entramos em algum projeto ja existente. É importante notar que ao final da url devemos colocar o ponto para indicar
que o clone deve ser colocado no diretorio atual

Para remover/deletar algum arquivo utiliza-se o comando rm: git rm <name file>

O comando git log é utilizado para ver o historico de todos os commits realizados no projeto, esse historico
é apresentado de forma decrescentes. Para ejetar e voltar a linha de codigo utiliza-se a tecla Q.

Para renomear ou mover uma pasta basta utilizar o comando: git mv <arquivo a ser movido ou renomeado> <local para onde vai ser movido ou novo nome> 

Para voltar um arquivo para seu estado inicial, antes de qualquer alteração, utiliza-se o comando 
git checkout <name file>. Com esse comando podemos fazer o arquivo voltar ao estado igual ao do repositorio. Não desfaz commits

Para ignorar algum arquivo utilizamos o .gitignore, essa é uma pasta que utilizamos para informar
que o arquivo não deve ser enviado ao repositorio do git. Normalmente arquivos sensiveis ou que podem ser
instalados depois estão nessa pasta. Basta criar a pasta .gitignore e adicionar dentro dela o nome do arquivo a ser ignorado

Para resetar uma branch a algum estado passado, Normalmente no estado da branch origin/master, utiliza-se o comando
git reset --hard <nome do arquivo ao qual queremos retornar o atual>. Esse comando desfaz os commits realizados e quais quer outras 
alterações antes do git push final

                                                !!---> Branches<--!!

As branchs são utilizadas para criar ramificações do codigo principal para tratar bugs, ou criar novas funcionalidades
separadamente de forma que ao final é possivel intergrar tudo ao repo da produção

Para criar uma branch, ramificação utilizamos o comando git branch <name file>, e para verificar as 
branchs criadas utiliza-se git branch

Para deletar branch utiliza-se a flag -d ou --delete, o codigo fica : git branch -d <name file> 

Para alternar entre as branch utiliza-se o comando git checkout -b <name of branch> para mudar 
e criar uma branch com o comando git checkout <name of branch> . Deve-se tomar cuidado
pois ao mudar de branch e não realizar o commit da atual, as mudanças são propagadas para a proxima branch a ser aberta

Para unir branchs utilizamos o comando git marge <branch name>

O comando git stash é utilizado para resetar uma branch. O arquivo em si não é perdido, ele vai para uma
especie de lixeira no gitHub e é possivel recupera-lo depois. 
Para ver quais stash foram feitas utiliza-se o comando git stash list e para recuperar alguma basta utilizar
git stash apply <number of stash>
Para visualizar as alterações na stash utiliza-se o comando git stash show -p <number of stash>

Para limpar todas as stash utiliza-se o comando git stash clear, e para remover alguma em especifico 
git stash frop <number of stash>

Tags podem ser utilizadas como chekpoint de determinados estagios de uma branch, são criadas pelo comando
git tag -a <name> -m"mensagem"
Para ver todas as tags basta digitar git tag
Para entrar em uma tag utiliza-se o comando git checkout <tag name>
Para ver as mudanças em uma tag utiliza-se git show <tag name>

Para enviar as tags ao repo utiliza-se o comando git push origin <tag name>, ou
para enviar tudo de uma vez usamos git push origin --tag